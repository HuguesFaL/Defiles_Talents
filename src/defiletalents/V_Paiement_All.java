package defiletalents;

import javax.swing.table.DefaultTableModel;

/**
 * Classe permettant de gérer la vue relative à la table tal_paiement.
 *
 * @author giraudeaup
 */
public class V_Paiement_All extends javax.swing.JFrame {

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Identifiant de la vue.
     */
    private int id_achat = 0;
    /**
     * Montant payé par le client. 0 par défaut.
     */
    private float montantPaye = 0f;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Paiement_All(Controller controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePaiement = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        btEdit = new javax.swing.JButton();
        btDel = new javax.swing.JButton();
        lbMontant = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));
        setResizable(false);
        setSize(new java.awt.Dimension(640, 480));

        btClose.setText("Fermer");
        btClose.setMaximumSize(new java.awt.Dimension(160, 25));
        btClose.setMinimumSize(new java.awt.Dimension(160, 25));
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        tablePaiement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Id", "Date paiement", "Montant", "Mode paiement"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePaiement.setMaximumSize(new java.awt.Dimension(480, 20));
        tablePaiement.setRequestFocusEnabled(false);
        tablePaiement.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablePaiement);
        if (tablePaiement.getColumnModel().getColumnCount() > 0) {
            tablePaiement.getColumnModel().getColumn(0).setMinWidth(0);
            tablePaiement.getColumnModel().getColumn(0).setPreferredWidth(0);
            tablePaiement.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btAdd.setText("Ajouter...");
        btAdd.setMaximumSize(new java.awt.Dimension(160, 25));
        btAdd.setMinimumSize(new java.awt.Dimension(160, 25));
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btEdit.setText("Modifier...");
        btEdit.setMaximumSize(new java.awt.Dimension(160, 25));
        btEdit.setMinimumSize(new java.awt.Dimension(160, 25));
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btDel.setText("Supprimer...");
        btDel.setMaximumSize(new java.awt.Dimension(160, 25));
        btDel.setMinimumSize(new java.awt.Dimension(160, 25));
        btDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btClose, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(324, Short.MAX_VALUE)
                        .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btClose, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setBounds(0, 0, 650, 510);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Fermer'.
     *
     * @param evt
     */
    private void btCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btCloseActionPerformed
    {//GEN-HEADEREND:event_btCloseActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btCloseActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Ajouter'.
     *
     * @param evt
     */
    private void btAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAddActionPerformed
    {//GEN-HEADEREND:event_btAddActionPerformed
        controller.getPaiementEditFrame(getId_Achat(), V_Main.MODE_AJOUT).setVisible(true);
    }//GEN-LAST:event_btAddActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Modifier'.
     *
     * @param evt
     */
    private void btEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btEditActionPerformed
    {//GEN-HEADEREND:event_btEditActionPerformed
        if (tablePaiement.getSelectedRow() != -1) {
            controller.getPaiementEditFrame(getId_Achat(), (int) tablePaiement.getModel().getValueAt(tablePaiement.getSelectedRow(), 0), V_Main.MODE_EDITION).setVisible(true);
        }
    }//GEN-LAST:event_btEditActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Supprimer'.
     *
     * @param evt
     */
    private void btDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btDelActionPerformed
    {//GEN-HEADEREND:event_btDelActionPerformed
        if (tablePaiement.getSelectedRow() != -1) {
            String id = id_achat + ";" + tablePaiement.getModel().getValueAt(tablePaiement.getSelectedRow(), 0);
            controller.getDeleteConfirmFrame("paiement", id).setVisible(true);
        }
    }//GEN-LAST:event_btDelActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b).
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setTitle("Paiements de la vente " + id_achat);
            setLocationRelativeTo(controller.getMainFrame());
            setTable();
            if (controller.getMontant(id_achat) - getMontantPaye() <= 0) {
                btAdd.setEnabled(false);
            }
            else {
                btAdd.setEnabled(true);
            }
        }
        super.setVisible(b);
    }

    /**
     * Met à jour le tableau et le montant restant à payé utilisés par la vue.
     */
    private void setTable() {
        montantPaye = 0f;
        DefaultTableModel model = (DefaultTableModel) tablePaiement.getModel();
        int size = controller.getPaiements().size();
        int i = 0;
        String mode = "null";
        model.setRowCount(size);

        for (M_Paiement p : controller.getPaiements()) {
            if (p.getId_Achat() == id_achat) {
                model.setValueAt(p.getId(), i, 0);
                model.setValueAt(p.getDate_PaiementAsString(), i, 1);
                model.setValueAt(p.getMontant(), i, 2);
                mode = ((controller.getModePaiement(p.getId_Mode()) != null) ? controller.getModePaiement(p.getId_Mode()).getCode() : "null");
                model.setValueAt(mode, i, 3);
                i++;
                montantPaye += p.getMontant();
            }

        }
        model.setRowCount(i);
        tablePaiement.setModel(model);
        lbMontant.setText("Restant: " + String.valueOf(controller.getMontant(id_achat) - getMontantPaye()) + "€");
    }

    /**
     * Retourne le montant déjà payé.
     *
     * @return
     */
    private float getMontantPaye() {
        return this.montantPaye;
    }

    /**
     * Valorise l'identifiant de la vue.
     *
     * @param id_achat
     */
    public void setValues(int id_achat) {
        this.id_achat = id_achat;
    }

    /**
     * Retourne l'identifiant de la vue.
     *
     * @return
     */
    public int getId_Achat() {
        return this.id_achat;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btClose;
    private javax.swing.JButton btDel;
    private javax.swing.JButton btEdit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbMontant;
    private javax.swing.JTable tablePaiement;
    // End of variables declaration//GEN-END:variables
}
