package defiletalents;

import javax.swing.DefaultComboBoxModel;
import methodesVerif.Verify;

/**
 * Classe permettant de gérer la vue relative à un enregistrement de la table
 * tal_place.
 *
 * @author giraudeaup
 */
public class V_Place_Edit extends javax.swing.JDialog {

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Identifiant de l'enregistrement.
     */
    private int id = 0;
    /**
     * Mode de la vue.
     */
    private int mode = 0;
    /**
     * Tableau d'entiers représentant les identifiants des Zones.
     */
    private int[] idZones;
    /**
     * Tableau d'entiers représentant les identifiants des Plans.
     */
    private int[] idPlans;
    /**
     * Tableau d'entiers représentant les identifiants des Types de place.
     */
    private int[] idTypes;
    /**
     * Tableau d'entiers représentant les identifiants des places entourant
     * cette place.
     */
    private int[] idPLaceNextTo;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Place_Edit(Controller controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btAnnuler = new javax.swing.JButton();
        btValider = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        edCommentaire = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lbCode = new javax.swing.JLabel();
        edCode = new javax.swing.JTextField();
        lbCoord = new javax.swing.JLabel();
        edPosX = new javax.swing.JTextField();
        edPosY = new javax.swing.JTextField();
        lbDispo = new javax.swing.JLabel();
        lbZone = new javax.swing.JLabel();
        cbZone = new javax.swing.JComboBox<>();
        lbPlan = new javax.swing.JLabel();
        cbPlan = new javax.swing.JComboBox<>();
        lbTypePlace = new javax.swing.JLabel();
        cbTypePlace = new javax.swing.JComboBox<>();
        lbWarning = new javax.swing.JLabel();
        lbLeft = new javax.swing.JLabel();
        cbLeft = new javax.swing.JComboBox<>();
        lbRight = new javax.swing.JLabel();
        cbRight = new javax.swing.JComboBox<>();
        ckNonDispo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);

        btAnnuler.setText("Annuler");
        btAnnuler.setNextFocusableComponent(edCode);
        btAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnnulerActionPerformed(evt);
            }
        });

        btValider.setText("Valider");
        btValider.setNextFocusableComponent(btAnnuler);
        btValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValiderActionPerformed(evt);
            }
        });

        edCommentaire.setColumns(20);
        edCommentaire.setRows(5);
        jScrollPane1.setViewportView(edCommentaire);

        jLabel1.setText("Commentaire:");

        lbCode.setText("Code:");

        edCode.setNextFocusableComponent(edPosX);

        lbCoord.setText("Coordonées X et Y:");

        edPosX.setToolTipText("Coordonée X");
        edPosX.setNextFocusableComponent(edPosY);

        edPosY.setToolTipText("Coordonée Y");
        edPosY.setNextFocusableComponent(cbZone);

        lbDispo.setText("Disponibilité:");

        lbZone.setText("Zone:");

        cbZone.setNextFocusableComponent(cbPlan);

        lbPlan.setText("Plan:");

        cbPlan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        cbPlan.setNextFocusableComponent(cbTypePlace);

        lbTypePlace.setText("Type de place:");

        cbTypePlace.setNextFocusableComponent(btValider);

        lbLeft.setText("Place à gauche: ");

        cbLeft.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbRight.setText("Place à droite: ");

        cbRight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ckNonDispo.setText("Non disponible ?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btValider, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbCode, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edCode, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbLeft)
                            .addComponent(cbLeft, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbDispo, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(lbRight)
                            .addComponent(cbRight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ckNonDispo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(170, 170, 170)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbZone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbZone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(edPosX, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(edPosY, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbCoord, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(lbPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbPlan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbTypePlace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbTypePlace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbDispo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckNonDispo)
                        .addGap(18, 18, 18)
                        .addComponent(lbLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbRight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCoord, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edPosX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edPosY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lbZone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTypePlace, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbTypePlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnnuler)
                    .addComponent(btValider)
                    .addComponent(lbWarning))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Annuler'.
     *
     * @param evt
     */
    private void btAnnulerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAnnulerActionPerformed
    {//GEN-HEADEREND:event_btAnnulerActionPerformed
        enableLabels(true);
        btAnnuler.setText("Annuler");
        btValider.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btAnnulerActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Valider'.
     *
     * @param evt
     */
    private void btValiderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btValiderActionPerformed
    {//GEN-HEADEREND:event_btValiderActionPerformed
        if (!edCode.getText().equals("")) {
            String code = edCode.getText();
            boolean disponible = !ckNonDispo.isSelected();
            String commentaire = edCommentaire.getText();
            int xplan = Verify.toInt(edPosX.getText());
            int yplan = Verify.toInt(edPosY.getText());
            int id_zone = idZones[cbZone.getSelectedIndex()];
            int id_plan = idPlans[cbPlan.getSelectedIndex()];
            int id_type = idTypes[cbTypePlace.getSelectedIndex()];
            int id_gauche = idPLaceNextTo[cbLeft.getSelectedIndex()];
            int id_droite = idPLaceNextTo[cbRight.getSelectedIndex()];

            controller.updatePlace(id, code, disponible, commentaire, xplan, yplan, id_zone, id_plan, id_type, id_gauche, id_droite);
            controller.getPlaceAllFrame().setVisible(true);
            controller.setMainStats();
            setVisible(false);
        }
        else {
            lbWarning.setText("Le champs code est obligatoire.");
        }
    }//GEN-LAST:event_btValiderActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b).
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setLocationRelativeTo(controller.getMainFrame());
            lbWarning.setText("");
        }
        super.setVisible(b);
    }

    /**
     * Rempli les comboBoxes utilisés par la vue.
     */
    private void setComboBoxes() {
        // ComboBox ZONE
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        idZones = new int[controller.getZones().size()];
        int i = 0;

        for (M_Zone z : controller.getZones()) {
            model.addElement(z.getLibelle());
            idZones[i] = z.getId();
            i++;
        }
        cbZone.setModel(model);

        //ComboBox PLAN
        model = new DefaultComboBoxModel();
        idPlans = new int[controller.getPlans().size()];
        i = 0;

        for (M_Plan p : controller.getPlans()) {
            model.addElement(p.getLibelle());
            idPlans[i] = p.getId();
            i++;
        }
        cbPlan.setModel(model);

        //ComboBox TYPE
        model = new DefaultComboBoxModel();
        idTypes = new int[controller.getTypesPlace().size()];
        i = 0;

        for (M_Type_Place t : controller.getTypesPlace()) {
            model.addElement(t.getLibelle());
            idTypes[i] = t.getId();
            i++;
        }
        cbTypePlace.setModel(model);

        //ComboBox PlaceNextTo
        DefaultComboBoxModel modelLeft = new DefaultComboBoxModel();
        DefaultComboBoxModel modelRight = new DefaultComboBoxModel();
        idPLaceNextTo = new int[controller.getPlaces().size() + 1];
        i = 1;

        idPLaceNextTo[0] = 0;
        modelLeft.addElement("Aucune");
        modelRight.addElement("Aucune");
        for (M_Place p : controller.getPlaces()) {
            modelLeft.addElement(p.getCode());
            modelRight.addElement(p.getCode());
            idPLaceNextTo[i] = p.getId();
            i++;
        }
        cbLeft.setModel(modelLeft);
        cbRight.setModel(modelRight);
    }

    /**
     * Met à jour les valeurs utilisées par la vue.
     *
     * @param id
     * @param code
     * @param commentaire
     * @param posX
     * @param posY
     * @param disponible
     * @param id_zone
     * @param id_plan
     * @param id_type
     * @param id_gauche
     * @param id_droite
     * @param mode
     */
    public void setValues(int id, String code, String commentaire, int posX, int posY, boolean disponible, int id_zone, int id_plan, int id_type, int id_gauche, int id_droite, int mode) {
        setComboBoxes();
        this.mode = mode;
        this.id = id;

        switch (mode) {
            case V_Main.MODE_AJOUT:
                setTitle("Ajout d'une nouvelle place");
                edCode.setText("");
                edCommentaire.setText("");
                edPosX.setText("");
                edPosY.setText("");
                ckNonDispo.setSelected(false);
                cbPlan.setSelectedIndex(0);
                cbZone.setSelectedIndex(0);
                cbTypePlace.setSelectedIndex(0);
                cbLeft.setSelectedIndex(0);
                cbRight.setSelectedIndex(0);
                break;
            case V_Main.MODE_EDITION:
                setTitle("Edition de la place " + id);
                edCode.setText(code);
                edCommentaire.setText(commentaire);
                edPosX.setText(String.valueOf(posX));
                edPosY.setText(String.valueOf(posY));
                ckNonDispo.setSelected(!disponible);
                int i = 0;
                for (i = 0; i < idZones.length; i++) {
                    if (idZones[i] == id_zone) {
                        cbZone.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPlans.length; i++) {
                    if (idPlans[i] == id_plan) {
                        cbPlan.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idTypes.length; i++) {
                    if (idTypes[i] == id_type) {
                        cbTypePlace.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPLaceNextTo.length; i++) {
                    if (idPLaceNextTo[i] == id_gauche) {
                        cbLeft.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPLaceNextTo.length; i++) {
                    if (idPLaceNextTo[i] == id_droite) {
                        cbRight.setSelectedIndex(i);
                        break;
                    }
                }
                break;
            default:
                setTitle("Consultation de la place " + id);
                edCode.setText(code);
                edCommentaire.setText(commentaire);
                edPosX.setText(String.valueOf(posX));
                edPosY.setText(String.valueOf(posY));
                ckNonDispo.setSelected(!disponible);

                i = 0;
                for (i = 0; i < idZones.length; i++) {
                    if (idZones[i] == id_zone) {
                        cbZone.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPlans.length; i++) {
                    if (idPlans[i] == id_plan) {
                        cbPlan.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idTypes.length; i++) {
                    if (idTypes[i] == id_type) {
                        cbTypePlace.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPLaceNextTo.length; i++) {
                    if (idPLaceNextTo[i] == id_gauche) {
                        cbLeft.setSelectedIndex(i);
                        break;
                    }
                }
                i = 0;
                for (i = 0; i < idPLaceNextTo.length; i++) {
                    if (idPLaceNextTo[i] == id_droite) {
                        cbRight.setSelectedIndex(i);
                        break;
                    }
                }
                enableLabels(false);
                btValider.setVisible(false);
                btAnnuler.setText("Fermer");
                break;
        }

    }

    /**
     * Active ou désactivé les TextFields.
     *
     * @param b
     */
    private void enableLabels(boolean b) {
        edCode.setEditable(b);
        edCommentaire.setEditable(b);
        edPosX.setEditable(b);
        edPosY.setEditable(b);
        ckNonDispo.setEnabled(b);
        cbPlan.setEnabled(b);
        cbZone.setEnabled(b);
        cbTypePlace.setEnabled(b);
        cbLeft.setEnabled(b);
        cbRight.setEnabled(b);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnnuler;
    private javax.swing.JButton btValider;
    private javax.swing.JComboBox<String> cbLeft;
    private javax.swing.JComboBox<String> cbPlan;
    private javax.swing.JComboBox<String> cbRight;
    private javax.swing.JComboBox<String> cbTypePlace;
    private javax.swing.JComboBox<String> cbZone;
    private javax.swing.JCheckBox ckNonDispo;
    private javax.swing.JTextField edCode;
    private javax.swing.JTextArea edCommentaire;
    private javax.swing.JTextField edPosX;
    private javax.swing.JTextField edPosY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCode;
    private javax.swing.JLabel lbCoord;
    private javax.swing.JLabel lbDispo;
    private javax.swing.JLabel lbLeft;
    private javax.swing.JLabel lbPlan;
    private javax.swing.JLabel lbRight;
    private javax.swing.JLabel lbTypePlace;
    private javax.swing.JLabel lbWarning;
    private javax.swing.JLabel lbZone;
    // End of variables declaration//GEN-END:variables
}
