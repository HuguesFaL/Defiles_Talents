package defiletalents;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import methodesVerif.Verify;
import org.joda.time.DateTime;

/**
 * Classe permettant de gérer la vue relative à un enregistrement de la table
 * tal_paiement.
 *
 * @author giraudeaup
 */
public class V_Paiement_Edit extends javax.swing.JFrame {

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Date selectionnée.
     */
    private Calendar selectedDate;
    /**
     * Id_achat de l'enregistrement.
     */
    private int id_achat = 0;
    /**
     * Identifiant de l'enregistrement.
     */
    private int id = 0;
    /**
     * Mode de la vue.
     */
    private int mode = 0;
    /**
     * Tableau d'entiers représentant les identifiants des modes de paiements.
     */
    private int[] idModes;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Paiement_Edit(Controller controller) {
        this.controller = controller;
        initComponents();
        setSelectedDate(Calendar.getInstance());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btAnnuler = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        edCommentaire = new javax.swing.JTextArea();
        lbDate = new javax.swing.JLabel();
        lbModePaiement = new javax.swing.JLabel();
        btDate = new javax.swing.JButton();
        edDatePaiement = new javax.swing.JTextField();
        lbWarning = new javax.swing.JLabel();
        lbMontant = new javax.swing.JLabel();
        lbCommentaire = new javax.swing.JLabel();
        btValider = new javax.swing.JButton();
        cbModePaiement = new javax.swing.JComboBox<>();
        edMontant = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(697, 367));

        btAnnuler.setText("Annuler");
        btAnnuler.setNextFocusableComponent(edDatePaiement);
        btAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnnulerActionPerformed(evt);
            }
        });

        edCommentaire.setColumns(20);
        edCommentaire.setLineWrap(true);
        edCommentaire.setRows(5);
        jScrollPane1.setViewportView(edCommentaire);

        lbDate.setText("Date:");

        lbModePaiement.setText("Mode de paiement:");

        btDate.setText("=");
        btDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDateActionPerformed(evt);
            }
        });

        edDatePaiement.setToolTipText("Format: dd/mm/yyyy");
        edDatePaiement.setNextFocusableComponent(edMontant);

        lbMontant.setText("Montant:");

        lbCommentaire.setText("Commentaire : ");

        btValider.setText("Valider");
        btValider.setNextFocusableComponent(btAnnuler);
        btValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValiderActionPerformed(evt);
            }
        });

        cbModePaiement.setNextFocusableComponent(btValider);

        edMontant.setNextFocusableComponent(cbModePaiement);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btValider, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbCommentaire)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(edDatePaiement, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btDate))
                            .addComponent(lbDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbMontant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbModePaiement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbModePaiement, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbModePaiement, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbModePaiement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edDatePaiement, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDate)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addComponent(edMontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(lbCommentaire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbWarning, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btValider)
                        .addComponent(btAnnuler)))
                .addContainerGap())
        );

        setBounds(0, 0, 592, 355);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Annuler'.
     *
     * @param evt
     */
    private void btAnnulerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAnnulerActionPerformed
    {//GEN-HEADEREND:event_btAnnulerActionPerformed
        edDatePaiement.setEditable(true);
        btDate.setEnabled(true);
        edMontant.setEditable(true);
        edCommentaire.setEditable(true);
        cbModePaiement.setEnabled(true);
        btAnnuler.setText("Annuler");
        btValider.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btAnnulerActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton d'affichage du
     * calendrier.
     *
     * @param evt
     */
    private void btDateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btDateActionPerformed
    {//GEN-HEADEREND:event_btDateActionPerformed
        controller.getCalendarFrame(this).setVisible(true);
    }//GEN-LAST:event_btDateActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Valider'.
     *
     * @param evt
     */
    private void btValiderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btValiderActionPerformed
    {//GEN-HEADEREND:event_btValiderActionPerformed
        try {
            if (!edMontant.getText().isEmpty()) {
                DateTime date_paiement;
                float montant = Verify.toFloat(edMontant.getText());
                String commentaire = edCommentaire.getText();
                int id_mode = idModes[cbModePaiement.getSelectedIndex()];

                try {
                    date_paiement = new DateTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(edDatePaiement.getText() + " " + DateTime.now().toString("HH:mm:ss")));
                }
                catch (Exception e) {
                    date_paiement = new DateTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(DateTime.now().toString("yyyy-MM-dd HH:mm:ss")));
                }

                controller.updatePaiement(id_achat, id, date_paiement, montant, commentaire, id_mode);
                controller.getPaiementAllFrame(id_achat).setVisible(true);
                setVisible(false);
            }
            else {
                lbWarning.setText("Erreur: Le champs montant est requis.");
            }
        }
        catch (ParseException ex) {
            Logger.getLogger(V_Achat_Edit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btValiderActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b).
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setLocationRelativeTo(controller.getPaiementAllFrame(id_achat));
            lbWarning.setText("");
        }

        super.setVisible(b);
    }

    /**
     * Rempli le comboBox relatif aux modes de paiements.
     */
    private void setComboMode() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        idModes = new int[controller.getModesPaiement().size()];
        int i = -1;

        for (M_Mode_Paiement m : controller.getModesPaiement()) {
            if (i == -1) {
                i++;
                continue;
            }

            model.addElement(m.getCode());
            idModes[i] = m.getId();
            i++;
        }

        cbModePaiement.setModel(model);
    }

    /**
     * Met à jour les valeurs utilisées par la vue.
     *
     * @param id_achat
     * @param id
     * @param date_paiement
     * @param montant
     * @param commentaire
     * @param id_mode
     * @param mode
     */
    public void setValues(int id_achat, int id, String date_paiement, float montant, String commentaire, int id_mode, int mode) {
        setComboMode();
        this.id_achat = id_achat;
        this.id = id;
        this.mode = mode;

        switch (mode) {
            case V_Main.MODE_AJOUT:
                setTitle("Ajout d'un nouveau paiement pour la vente " + id_achat);
                edDatePaiement.setText(getSelectedDate().toString("yyyy-MM-dd"));
                edMontant.setText("");
                edCommentaire.setText("");
                cbModePaiement.setSelectedIndex(0);
                break;
            case V_Main.MODE_EDITION:
                setTitle("Edition du paiement pour la vente " + id_achat);
                edDatePaiement.setText(date_paiement);
                edMontant.setText(String.valueOf(montant));
                edCommentaire.setText(commentaire);
                int i = 0;
                for (i = 0; i < idModes.length; i++) {
                    if (idModes[i] == id_mode) {
                        cbModePaiement.setSelectedIndex(i);
                        break;
                    }
                }
                break;
            default:
                setTitle("Consultation du paiement pour la vente " + id_achat);
                edDatePaiement.setText(date_paiement);
                edMontant.setText(String.valueOf(montant));
                edCommentaire.setText(commentaire);
                i = 0;
                for (i = 0; i < idModes.length; i++) {
                    if (idModes[i] == id_mode) {
                        cbModePaiement.setSelectedIndex(i);
                        break;
                    }
                }
                edDatePaiement.setEditable(false);
                btDate.setEnabled(false);
                edMontant.setEditable(false);
                edCommentaire.setEditable(false);
                cbModePaiement.setEnabled(false);
                btAnnuler.setText("Fermer");
                btValider.setVisible(false);
                break;
        }
    }

    /**
     * Selectionne une date.
     *
     * @param date
     */
    public void setSelectedDate(Calendar date) {
        this.selectedDate = date;
        edDatePaiement.setText(getSelectedDate().toString("yyyy-MM-dd"));
    }

    /**
     * Retourne la date selectionnée.
     *
     * @return
     */
    public DateTime getSelectedDate() {
        return new DateTime(this.selectedDate.getTime());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnnuler;
    private javax.swing.JButton btDate;
    private javax.swing.JButton btValider;
    private javax.swing.JComboBox<String> cbModePaiement;
    private javax.swing.JTextArea edCommentaire;
    private javax.swing.JTextField edDatePaiement;
    private javax.swing.JTextField edMontant;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCommentaire;
    private javax.swing.JLabel lbDate;
    private javax.swing.JLabel lbModePaiement;
    private javax.swing.JLabel lbMontant;
    private javax.swing.JLabel lbWarning;
    // End of variables declaration//GEN-END:variables
}
