package defiletalents;

import java.util.concurrent.CopyOnWriteArrayList;
import javax.swing.DefaultComboBoxModel;
import methodesVerif.Verify;

/**
 * Classe permettant de gérer la vue relative à un enregistrement de la table
 * tal_ligne.
 *
 * @author giraudeaup
 */
public class V_Ligne_Edit extends javax.swing.JDialog {

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Id_achat de l'enregistrement.
     */
    private int id_achat = 0;
    /**
     * Id de l'enregistrement.
     */
    private int id = 0;

    /**
     * Identifiant de la place selectionnée pour cette vue.
     */
    private int id_place = 0;
    /**
     * Mode de la vue.
     */
    private int mode = 0;
    /**
     * Tableau d'entiers représentant les identifiants des places.
     */
    private int[] idPlaces;
    /**
     * Tableau d'entiers représentant les identifiants des catégories.
     */
    private int[] idCategories;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Ligne_Edit(Controller controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbPlace = new javax.swing.JLabel();
        cbPlace = new javax.swing.JComboBox<>();
        lbCategorie = new javax.swing.JLabel();
        cbCategorie = new javax.swing.JComboBox<>();
        btAnnuler = new javax.swing.JButton();
        btValider = new javax.swing.JButton();
        ckbImprime = new javax.swing.JCheckBox();
        lbWarning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        lbPlace.setText("Choix de la place:");

        cbPlace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPlace.setNextFocusableComponent(cbCategorie);

        lbCategorie.setText("Catégorie:");

        cbCategorie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCategorie.setNextFocusableComponent(ckbImprime);

        btAnnuler.setText("Annuler");
        btAnnuler.setNextFocusableComponent(cbPlace);
        btAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnnulerActionPerformed(evt);
            }
        });

        btValider.setText("Valider");
        btValider.setNextFocusableComponent(btAnnuler);
        btValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValiderActionPerformed(evt);
            }
        });

        ckbImprime.setText("Imprimé");
        ckbImprime.setNextFocusableComponent(btValider);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 187, Short.MAX_VALUE)
                        .addComponent(btValider, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ckbImprime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbPlace, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(cbPlace, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbCategorie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCategorie, 0, 162, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(ckbImprime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnnuler)
                    .addComponent(btValider))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Valider'.
     *
     * @param evt
     */
    private void btValiderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btValiderActionPerformed
    {//GEN-HEADEREND:event_btValiderActionPerformed
        if (cbPlace.getSelectedIndex() != -1) {
            if (controller.estDispoAlavente(idPlaces[cbPlace.getSelectedIndex()]) || id_place == idPlaces[cbPlace.getSelectedIndex()]) {
                controller.updateLigne(id_achat, id, ckbImprime.isSelected(), idPlaces[cbPlace.getSelectedIndex()], idCategories[cbCategorie.getSelectedIndex()]);
                controller.getLigneAllFrame(id_achat).setVisible(true);
                controller.setMainStats();
                setVisible(false);
            }
            else {
                lbWarning.setText("Erreur: La place n'est pas disponible à la vente.");
            }

        }
        else {
            lbWarning.setText("Erreur: La place n'est pas valide.");
        }

    }//GEN-LAST:event_btValiderActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Annuler'.
     *
     * @param evt
     */
    private void btAnnulerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAnnulerActionPerformed
    {//GEN-HEADEREND:event_btAnnulerActionPerformed
        ckbImprime.setEnabled(true);
        cbCategorie.setEnabled(true);
        cbPlace.setEnabled(true);
        btAnnuler.setText("Annuler");
        btValider.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btAnnulerActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b).
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setLocationRelativeTo(controller.getLigneAllFrame(id_achat));
            lbWarning.setText("");
        }

        super.setVisible(b);
    }

    /**
     * Rempli les comboBoxes utilisés par la vue.
     */
    private void setComboBoxes() {
        // Places
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        CopyOnWriteArrayList<M_Place> places = controller.getPlaces();
        idPlaces = new int[places.size()];
        int i = 0;
        for (M_Place p : places) {            
            model.addElement(p.getCode());
            idPlaces[i] = p.getId();
            i++;

        }
        cbPlace.setModel(model);

        // Categories
        model = new DefaultComboBoxModel();
        idCategories = new int[controller.getCategoriesPrix().size()];
        i = -1;
        for (M_Categorie_Prix c : controller.getCategoriesPrix()) {
            if (i == -1)  {
                i++;
                continue;
            }
            model.addElement(c.getLibelle());
            idCategories[i] = c.getId();
            i++;
        }
        cbCategorie.setModel(model);
    }

    /**
     * Rempli les comboBoxes utilisés par la vue.
     */
    private void setComboBoxesDispo() {
        // Places
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        CopyOnWriteArrayList<M_Place> places = controller.getPlaces();
        idPlaces = new int[places.size()];
        int i = 0;
        for (M_Place p : places) {
            if (controller.estDispoAlavente(p.getId())) {
                model.addElement(p.getCode());
                idPlaces[i] = p.getId();
                i++;
            }
        }
        cbPlace.setModel(model);

        // Categories
        model = new DefaultComboBoxModel();
        idCategories = new int[controller.getCategoriesPrix().size()];
        i = -1;
        for (M_Categorie_Prix c : controller.getCategoriesPrix()) {
            if (i == -1)  {
                i++;
                continue;
            }
            model.addElement(c.getLibelle());
            idCategories[i] = c.getId();
            i++;
        }
        cbCategorie.setModel(model);
    }

    /**
     * Met à jour les valeurs utilisées par la vue.
     *
     * @param id_achat
     * @param id
     * @param imprime
     * @param id_place
     * @param id_categorie
     * @param mode
     */
    public void setValues(int id_achat, int id, boolean imprime, int id_place, int id_categorie, int mode) {

        this.id_achat = id_achat;
        this.id = id;
        this.mode = mode;

        switch (mode) {
            case V_Main.MODE_AJOUT:
                setComboBoxesDispo();
                setTitle("Ajout d'une nouvelle place pour l'achat " + id_achat);
                ckbImprime.setSelected(false);
                cbPlace.setSelectedIndex(cbPlace.getItemCount() == 0 ? -1 : 0);
                cbCategorie.setSelectedIndex(0);
                break;
            case V_Main.MODE_EDITION:
                this.id_place = id_place;
                setComboBoxes();
                setTitle("Edition de la place " + id + " pour la vente " + id_achat);
                ckbImprime.setSelected(imprime);
                int i;
                for (i = 0; i < idPlaces.length; i++) {
                    if (idPlaces[i] == id_place) {
                        cbPlace.setSelectedIndex(i);
                        break;
                    }
                }
                for (i = 0; i < idCategories.length; i++) {
                    if (idCategories[i] == id_categorie) {
                        cbCategorie.setSelectedIndex(i);
                        break;
                    }
                }
                break;
            default:
                setTitle("Edition de la place " + id + " pour la vente " + id_achat);
                ckbImprime.setSelected(imprime);
                for (i = 0; i < idPlaces.length; i++) {
                    if (idPlaces[i] == id_place) {
                        cbPlace.setSelectedIndex(i);
                        break;
                    }
                }
                for (i = 0; i < idCategories.length; i++) {
                    if (idCategories[i] == id_categorie) {
                        cbCategorie.setSelectedIndex(i);
                        break;
                    }
                }
                ckbImprime.setEnabled(false);
                cbCategorie.setEnabled(false);
                cbPlace.setEnabled(false);
                btAnnuler.setText("Fermer");
                btValider.setVisible(false);
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnnuler;
    private javax.swing.JButton btValider;
    private javax.swing.JComboBox<String> cbCategorie;
    private javax.swing.JComboBox<String> cbPlace;
    private javax.swing.JCheckBox ckbImprime;
    private javax.swing.JLabel lbCategorie;
    private javax.swing.JLabel lbPlace;
    private javax.swing.JLabel lbWarning;
    // End of variables declaration//GEN-END:variables
}
