package defiletalents;

import javax.swing.UIManager;

/**
 * Classe permettant de gérer la confirmation de suppression d'un
 * enregistrement.
 *
 * @author saiirod
 */
public class V_DeleteConfirm extends javax.swing.JDialog {

    /**
     * Le controleur de l'appli.
     */
    private Controller controller;
    /**
     * La table selectionné pour la suppression.
     */
    private String table = "";
    /**
     * L'identifiant de l'enregistrement à supprimer.
     */
    private String id = "";

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_DeleteConfirm(Controller controller) {
        this.controller = controller;
        initComponents();
        jScrollPane1.setBorder(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btConfirmer = new javax.swing.JButton();
        btAnnuler = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbConfirm = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(213, 213, 213));
        setModal(true);
        setResizable(false);

        btConfirmer.setText("Confirmer");
        btConfirmer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btConfirmerActionPerformed(evt);
            }
        });

        btAnnuler.setText("Annuler");
        btAnnuler.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btAnnulerActionPerformed(evt);
            }
        });

        lbConfirm.setEditable(false);
        lbConfirm.setBackground(UIManager.getColor("Label.background"));
        lbConfirm.setColumns(20);
        lbConfirm.setFont(UIManager.getFont("Label.font"));
        lbConfirm.setLineWrap(true);
        lbConfirm.setRows(3);
        lbConfirm.setTabSize(4);
        lbConfirm.setWrapStyleWord(true);
        lbConfirm.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setViewportView(lbConfirm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btConfirmer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConfirmer, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setBounds(0, 0, 460, 230);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Bouton de confirmation de suppression. Supprime l'enregistrement
     * correspondant à l'attribut privée id dans la table correspondante à
     * l'attribut privée table
     *
     * @param evt
     */
    private void btConfirmerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btConfirmerActionPerformed
    {//GEN-HEADEREND:event_btConfirmerActionPerformed
        switch (table) {
            case "client":
                controller.delClient(Integer.parseInt(id));
                controller.getClientAllFrame().setVisible(true);
                break;
            case "origine":
                controller.delOrigine(Integer.parseInt(id));
                controller.getOrigineAllFrame().setVisible(true);
                break;
            case "categorieprix":
                controller.delCategoriePrix(Integer.parseInt(id));
                controller.getCategoriePrixAllFrame().setVisible(true);
                break;
            case "classeprix":
                controller.delClassePrix(Integer.parseInt(id));
                controller.getClassePrixAllFrame().setVisible(true);
                break;
            case "modepaiement":
                controller.delModePaiement(Integer.parseInt(id));
                controller.getModePaiementAllFrame().setVisible(true);
                break;
            case "plan":
                controller.delPlan(Integer.parseInt(id));
                controller.getPlanAllFrame().setVisible(true);
                break;
            case "prix":
                int id_classe = Integer.parseInt(id.split(";")[0]);
                int id_categorie = Integer.parseInt(id.split(";")[1]);
                controller.delUnPrix(id_classe, id_categorie);
                controller.getPrixAllFrame().setVisible(true);
                break;
            case "typeplace":
                controller.delTypePlace(Integer.parseInt(id));
                controller.getTypePlaceAllFrame().setVisible(true);
                break;
            case "zone":
                controller.delZone(Integer.parseInt(id));
                controller.getZoneAllFrame().setVisible(true);
                break;
            case "achat":
                controller.delAchat(Integer.parseInt(id));
                controller.getAchatsAllFrame().setVisible(true);
                break;
            case "paiement":
                int id_achat = Integer.parseInt(id.split(";")[0]);
                int id_paiement = Integer.parseInt(id.split(";")[1]);
                controller.delPaiement(id_achat, id_paiement);
                controller.getPaiementAllFrame(id_achat).setVisible(true);
                break;
            case "place":
                controller.delPlace(Integer.parseInt(id));
                controller.getPlaceAllFrame().setVisible(true);
                break;
            case "ligne":
                id_achat = Integer.parseInt(id.split(";")[0]);
                int id_ligne = Integer.parseInt(id.split(";")[1]);
                controller.delLigne(id_achat, id_ligne);
                controller.getLigneAllFrame(id_achat).setVisible(true);
                break;
            default:
                break;
        }
        controller.setMainStats();
        setVisible(false);
    }//GEN-LAST:event_btConfirmerActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Annuler'.
     *
     * @param evt
     */
    private void btAnnulerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAnnulerActionPerformed
    {//GEN-HEADEREND:event_btAnnulerActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btAnnulerActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b)
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setLocationRelativeTo(null);
            setTitle("Suppression - " + table);
            switch (table) {
                case "client":
                    setMessage("Cela supprimera également les \nventes ainsi que  les reservations et les paiements associés.");
                    break;
                case "achat":
                    setMessage("Cela supprimera également les \nreservations et les paiements de cette vente.");
                    break;
                default:
                    setMessage("");

            }
        }

        super.setVisible(b);
    }

    /**
     * Définit la table et l'identifiant concerné par cette vue.
     *
     * @param table
     * @param id
     */
    public void setValues(String table, String id) {
        this.table = table.toLowerCase();
        this.id = id;
    }

    /**
     * Définit un message destiné à l'utilisateur.
     *
     * @param message
     */
    private void setMessage(String message) {
        lbConfirm.setText("Confirmer la suppression ? " + message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnnuler;
    private javax.swing.JButton btConfirmer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea lbConfirm;
    // End of variables declaration//GEN-END:variables
}
