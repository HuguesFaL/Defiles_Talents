package defiletalents;

import javax.swing.DefaultComboBoxModel;
import methodesVerif.Verify;

/**
 * Classe permettant de gérer la vue relative à un enregistrement de la table
 * tal_prix.
 *
 * @author giraudeaup
 */
public class V_Prix_Edit extends javax.swing.JDialog {

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Identifiant de la classe de l'enregistrement.
     */
    private int id_classe = 0;
    /**
     * Identifiant de la catégorie de l'enregistrement.
     */
    private int id_categorie = 0;
    /**
     * Mode de la vue.
     */
    private int mode = 0;

    /**
     * Tableau d'entiers représentant les identifiants des classes de prix.
     */
    private int[] idClasses;
    /**
     * Tableau d'entiers représentant les identifiants des catégories de prix.
     */
    private int[] idCategories;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Prix_Edit(Controller controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbPrix = new javax.swing.JLabel();
        edPrix = new javax.swing.JTextField();
        lbCategoriePrix = new javax.swing.JLabel();
        btValider = new javax.swing.JButton();
        btAnnuler = new javax.swing.JButton();
        cbCategoriePrix = new javax.swing.JComboBox<>();
        lbClassePrix = new javax.swing.JLabel();
        cbClassePrix = new javax.swing.JComboBox<>();
        lbWarning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);

        lbPrix.setText("Prix:");

        edPrix.setNextFocusableComponent(btValider);

        lbCategoriePrix.setText("Categorie prix:");

        btValider.setText("Valider");
        btValider.setNextFocusableComponent(btAnnuler);
        btValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValiderActionPerformed(evt);
            }
        });

        btAnnuler.setText("Annuler");
        btAnnuler.setNextFocusableComponent(cbClassePrix);
        btAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnnulerActionPerformed(evt);
            }
        });

        cbCategoriePrix.setNextFocusableComponent(edPrix);

        lbClassePrix.setText("Classe prix:");

        cbClassePrix.setNextFocusableComponent(cbCategoriePrix);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edPrix)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lbPrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(195, 195, 195))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btValider, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cbClassePrix, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(cbCategoriePrix, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lbClassePrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCategoriePrix, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbClassePrix, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategoriePrix, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbClassePrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCategoriePrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(lbPrix, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edPrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbWarning, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnnuler)
                    .addComponent(btValider))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Valider'.
     *
     * @param evt
     */
    private void btValiderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btValiderActionPerformed
    {//GEN-HEADEREND:event_btValiderActionPerformed
        if (controller.getUnPrix(idClasses[cbClassePrix.getSelectedIndex()], idCategories[cbCategoriePrix.getSelectedIndex()]) != null && mode == V_Main.MODE_AJOUT) {
            lbWarning.setText("Erreur: Ce couple de classe/catégorie existe déjà.");
        }
        else if (edPrix.getText().equals("") || cbCategoriePrix.getSelectedIndex() == -1 || cbClassePrix.getSelectedIndex() == -1) {
            lbWarning.setText("Erreur: Tous les champs sont obligatoires");
        }
        else {

            controller.updateUnPrix(idClasses[cbClassePrix.getSelectedIndex()], idCategories[cbCategoriePrix.getSelectedIndex()], Verify.toFloat(edPrix.getText()), mode);
               System.out.printf("idClasse: %d, idCategorie: %d, prix: %f\n",idClasses[cbClassePrix.getSelectedIndex()], idCategories[cbCategoriePrix.getSelectedIndex()],Verify.toFloat(edPrix.getText()) );
            setVisible(false);
            controller.getPrixAllFrame().setVisible(true);
        }
    }//GEN-LAST:event_btValiderActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Annuler'.
     *
     * @param evt
     */
    private void btAnnulerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAnnulerActionPerformed
    {//GEN-HEADEREND:event_btAnnulerActionPerformed
        btValider.setVisible(true);
        btAnnuler.setText("Annuler");
        cbClassePrix.setEnabled(true);
        cbCategoriePrix.setEnabled(true);
        setVisible(false);
    }//GEN-LAST:event_btAnnulerActionPerformed

    /**
     * Surcharge de la méthode setVisible(boolean b).
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        if (b) {
            setLocationRelativeTo(controller.getPrixAllFrame());
            lbWarning.setText("");
        }
        super.setVisible(b);
    }

    /**
     * Ajoute des lignes aux comboBoxes pour les codes classes et catégories.
     */
    private void setComboBoxes() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        idClasses = new int[controller.getClassesPrix().size()];
        int i = 0;

        for (M_Classe_Prix c : controller.getClassesPrix()) {
            model.addElement(c.getLibelle());
            idClasses[i] = c.getId();
            i++;
        }
        cbClassePrix.setModel(model);

        // Deuxième ComboBox
        model = new DefaultComboBoxModel();
        idCategories = new int[controller.getCategoriesPrix().size()];
        i = 0;

        for (M_Categorie_Prix c : controller.getCategoriesPrix()) {
            model.addElement(c.getLibelle());
            idCategories[i] = c.getId();
            i++;
        }
        i = 0;
        cbCategoriePrix.setModel(model);

    }

    /**
     * Met à jour les valeurs utilisées par la vue.
     *
     * @param id_classe
     * @param id_categorie
     * @param prix
     * @param mode
     */
    public void setValues(int id_classe, int id_categorie, float prix, int mode) {
        setComboBoxes();
        this.id_classe = id_classe;
        this.id_categorie = id_categorie;
        this.mode = mode;

        switch (mode) {
            case V_Main.MODE_AJOUT:
                setTitle("Ajout d'un nouveau prix");
                cbCategoriePrix.setEnabled(true);
                cbClassePrix.setEnabled(true);
                edPrix.setText("");
                break;
            case V_Main.MODE_EDITION:
                setTitle("Edition du prix " + id_classe + "-" + id_categorie);
                edPrix.setText(String.valueOf(prix));

                for (int i = 0; i < idClasses.length; i++) {
                    if (idClasses[i] == id_classe) {
                        cbClassePrix.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 0; i < idCategories.length; i++) {
                    if (idCategories[i] == id_categorie) {
                        cbCategoriePrix.setSelectedIndex(i);
                        break;
                    }
                }
                cbClassePrix.setEnabled(false);
                cbCategoriePrix.setEnabled(false);
                break;
            default:
                setTitle("Consultation du prix " + id_classe + "-" + id_categorie);
                edPrix.setText(String.valueOf(prix));

                for (int i = 0; i < idClasses.length; i++) {
                    if (idClasses[i] == id_classe) {
                        cbClassePrix.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 0; i < idCategories.length; i++) {
                    if (idCategories[i] == id_categorie) {
                        cbCategoriePrix.setSelectedIndex(i);
                        break;
                    }
                }
                cbClassePrix.setEnabled(false);
                cbCategoriePrix.setEnabled(false);
                edPrix.setEditable(false);
                btValider.setVisible(false);
                btAnnuler.setText("Fermer");
                break;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnnuler;
    private javax.swing.JButton btValider;
    private javax.swing.JComboBox<String> cbCategoriePrix;
    private javax.swing.JComboBox<String> cbClassePrix;
    private javax.swing.JTextField edPrix;
    private javax.swing.JLabel lbCategoriePrix;
    private javax.swing.JLabel lbClassePrix;
    private javax.swing.JLabel lbPrix;
    private javax.swing.JLabel lbWarning;
    // End of variables declaration//GEN-END:variables
}
