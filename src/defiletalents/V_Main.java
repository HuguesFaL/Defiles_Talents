package defiletalents;

import java.io.File;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Classe permettant de gérer la vue principale de l'appli DefileTalents.
 *
 * @author giraudeaup
 */
public class V_Main extends javax.swing.JFrame {

    /**
     * Mode de consultation des vues.
     */
    public static final int MODE_CONSULT = 0;
    /**
     * Mode d'ajout des vues.
     */
    public static final int MODE_AJOUT = 1;
    /**
     * Mode d'édition des vues.
     */
    public static final int MODE_EDITION = 2;

    /**
     * Controleur de l'appli.
     */
    private Controller controller;
    /**
     * Explorer utilisé pour ouvrir et creer une base de données.
     */
    private JFileChooser explorer;

    /**
     * Constructeur de la vue.
     *
     * @param controller
     */
    public V_Main(Controller controller) {
        this.controller = controller;
        explorer = new JFileChooser();
        explorer.setFileFilter(new FileNameExtensionFilter("Fichiers SQLite (.sqlite, .sq3)", "sqlite", "sq3"));
        explorer.setAcceptAllFileFilterUsed(false);
        explorer.setLocale(Locale.FRENCH);
        explorer.updateUI();
        initComponents();
        setLocationRelativeTo(null);
        setTitle(Globales.APP_NAME + " > Fenètre principale");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbVentesEffectuees = new javax.swing.JLabel();
        lbPlacesVendues = new javax.swing.JLabel();
        lbPlacesRestantes = new javax.swing.JLabel();
        lbStats = new javax.swing.JLabel();
        lbVentesResult = new javax.swing.JLabel();
        lbPlacesVResult = new javax.swing.JLabel();
        lbPlacesRResult = new javax.swing.JLabel();
        mbMain = new javax.swing.JMenuBar();
        mnFichier = new javax.swing.JMenu();
        miOpenBase = new javax.swing.JMenuItem();
        miCreateNewBase = new javax.swing.JMenuItem();
        miCreateFrom = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        mnEdition = new javax.swing.JMenu();
        miImportSql = new javax.swing.JMenuItem();
        mnBilleterie = new javax.swing.JMenu();
        miAchat = new javax.swing.JMenuItem();
        miAchatAll = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        miClients = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miRechercher = new javax.swing.JMenuItem();
        miVoirPlans = new javax.swing.JMenuItem();
        mnParams = new javax.swing.JMenu();
        miOrigine = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        miPrix = new javax.swing.JMenuItem();
        miCategoriePrix = new javax.swing.JMenuItem();
        miClassePrix = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miModePaiement = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        miPlaces = new javax.swing.JMenuItem();
        miPlan = new javax.swing.JMenuItem();
        miTypePlace = new javax.swing.JMenuItem();
        miZones = new javax.swing.JMenuItem();
        mnAbout = new javax.swing.JMenu();
        miInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lbVentesEffectuees.setText("Ventes effectuées : ");

        lbPlacesVendues.setText("Places vendues :");

        lbPlacesRestantes.setText("Places restantes :");

        lbStats.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStats.setText("-- Statistiques --");

        mnFichier.setMnemonic('F');
        mnFichier.setText("Fichier");

        miOpenBase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpenBase.setText("Ouvrir une base de données...");
        miOpenBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenBaseActionPerformed(evt);
            }
        });
        mnFichier.add(miOpenBase);

        miCreateNewBase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miCreateNewBase.setText("Creer une nouvelle base de données...");
        miCreateNewBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCreateNewBaseActionPerformed(evt);
            }
        });
        mnFichier.add(miCreateNewBase);

        miCreateFrom.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        miCreateFrom.setText("Creer à partir de...");
        miCreateFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCreateFromActionPerformed(evt);
            }
        });
        mnFichier.add(miCreateFrom);
        mnFichier.add(jSeparator2);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Quitter");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mnFichier.add(miExit);

        mbMain.add(mnFichier);

        mnEdition.setMnemonic('E');
        mnEdition.setText("Edition");

        miImportSql.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miImportSql.setText("Importer script SQL...");
        miImportSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportSqlActionPerformed(evt);
            }
        });
        mnEdition.add(miImportSql);

        mbMain.add(mnEdition);

        mnBilleterie.setMnemonic('B');
        mnBilleterie.setText("Billeterie");

        miAchat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        miAchat.setText("Vente");
        miAchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAchatActionPerformed(evt);
            }
        });
        mnBilleterie.add(miAchat);

        miAchatAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        miAchatAll.setText("Toutes les ventes");
        miAchatAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAchatAllActionPerformed(evt);
            }
        });
        mnBilleterie.add(miAchatAll);
        mnBilleterie.add(jSeparator4);

        miClients.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        miClients.setText("Gestion des clients");
        miClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miClientsActionPerformed(evt);
            }
        });
        mnBilleterie.add(miClients);
        mnBilleterie.add(jSeparator3);

        miRechercher.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        miRechercher.setText("Rechercher...");
        miRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRechercherActionPerformed(evt);
            }
        });
        mnBilleterie.add(miRechercher);

        miVoirPlans.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        miVoirPlans.setText("Voir les plans");
        miVoirPlans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVoirPlansActionPerformed(evt);
            }
        });
        mnBilleterie.add(miVoirPlans);

        mbMain.add(mnBilleterie);

        mnParams.setMnemonic('P');
        mnParams.setText("Paramètres");

        miOrigine.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        miOrigine.setText("Origines clients");
        miOrigine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOrigineActionPerformed(evt);
            }
        });
        mnParams.add(miOrigine);
        mnParams.add(jSeparator5);

        miPrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        miPrix.setText("Prix des places");
        miPrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPrixActionPerformed(evt);
            }
        });
        mnParams.add(miPrix);

        miCategoriePrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        miCategoriePrix.setText("Catégorie de prix");
        miCategoriePrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCategoriePrixActionPerformed(evt);
            }
        });
        mnParams.add(miCategoriePrix);

        miClassePrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        miClassePrix.setText("Classe de prix");
        miClassePrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miClassePrixActionPerformed(evt);
            }
        });
        mnParams.add(miClassePrix);
        mnParams.add(jSeparator1);

        miModePaiement.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        miModePaiement.setText("Mode de paiement");
        miModePaiement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miModePaiementActionPerformed(evt);
            }
        });
        mnParams.add(miModePaiement);
        mnParams.add(jSeparator6);

        miPlaces.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_MASK));
        miPlaces.setText("Places");
        miPlaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPlacesActionPerformed(evt);
            }
        });
        mnParams.add(miPlaces);

        miPlan.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        miPlan.setText("Plan de salle");
        miPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPlanActionPerformed(evt);
            }
        });
        mnParams.add(miPlan);

        miTypePlace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        miTypePlace.setText("Type de place");
        miTypePlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTypePlaceActionPerformed(evt);
            }
        });
        mnParams.add(miTypePlace);

        miZones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.CTRL_MASK));
        miZones.setText("Zone de plan");
        miZones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miZonesActionPerformed(evt);
            }
        });
        mnParams.add(miZones);

        mbMain.add(mnParams);

        mnAbout.setMnemonic('A');
        mnAbout.setText("A propos");

        miInfo.setText("Informations");
        miInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInfoActionPerformed(evt);
            }
        });
        mnAbout.add(miInfo);

        mbMain.add(mnAbout);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbStats, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(233, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbPlacesRestantes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbPlacesVendues, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbVentesEffectuees, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPlacesRResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPlacesVResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbVentesResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(lbStats)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbVentesResult, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbVentesEffectuees, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPlacesVendues, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPlacesVResult, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPlacesRestantes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPlacesRResult, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(225, Short.MAX_VALUE))
        );

        setBounds(0, 0, 650, 510);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Fichier - Ouvrir une
     * base de données'.
     *
     * @param evt
     */
    private void miOpenBaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miOpenBaseActionPerformed
    {//GEN-HEADEREND:event_miOpenBaseActionPerformed
        explorer.showDialog(this, "Ouvrir");
        if (explorer.getSelectedFile() != null) {
            controller.openDb(explorer.getSelectedFile());
        }
    }//GEN-LAST:event_miOpenBaseActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Fichier - Quitter'.
     *
     * @param evt
     */
    private void miExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miExitActionPerformed
    {//GEN-HEADEREND:event_miExitActionPerformed
        controller.exit();
    }//GEN-LAST:event_miExitActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Fichier - Creer une
     * nouvelle base de données'.
     *
     * @param evt
     */
    private void miCreateNewBaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCreateNewBaseActionPerformed
    {//GEN-HEADEREND:event_miCreateNewBaseActionPerformed
        explorer.showSaveDialog(this);
        if (explorer.getSelectedFile() != null) {
            if (!explorer.getSelectedFile().exists()) {
                String filename = explorer.getSelectedFile().getAbsolutePath();
                if (!(filename.endsWith(".sqlite") || filename.endsWith(".sq3"))) {
                    filename += ".sqlite";
                    controller.newDb(filename);
                }
            }
        }
    }//GEN-LAST:event_miCreateNewBaseActionPerformed

    /**
     * Méthode utilisée à la fermeture de la fenêtre.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        miExit.doClick();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Billeterie - Gestion
     * des clients'.
     *
     * @param evt
     */
    private void miClientsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miClientsActionPerformed
    {//GEN-HEADEREND:event_miClientsActionPerformed
        controller.getClientAllFrame().setVisible(true);
    }//GEN-LAST:event_miClientsActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'Paramètres -
     * Origines'.
     *
     * @param evt
     */
    private void miOrigineActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miOrigineActionPerformed
    {//GEN-HEADEREND:event_miOrigineActionPerformed
        controller.getOrigineAllFrame().setVisible(true);
    }//GEN-LAST:event_miOrigineActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres -
     * Catégories de prix'.
     *
     * @param evt
     */
    private void miCategoriePrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCategoriePrixActionPerformed
    {//GEN-HEADEREND:event_miCategoriePrixActionPerformed
        controller.getCategoriePrixAllFrame().setVisible(true);
    }//GEN-LAST:event_miCategoriePrixActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Classes
     * de prix'.
     *
     * @param evt
     */
    private void miClassePrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miClassePrixActionPerformed
    {//GEN-HEADEREND:event_miClassePrixActionPerformed
        controller.getClassePrixAllFrame().setVisible(true);
    }//GEN-LAST:event_miClassePrixActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Prix'.
     *
     * @param evt
     */
    private void miPrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miPrixActionPerformed
    {//GEN-HEADEREND:event_miPrixActionPerformed
        controller.getPrixAllFrame().setVisible(true);
    }//GEN-LAST:event_miPrixActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Modes de
     * paiement'.
     *
     * @param evt
     */
    private void miModePaiementActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miModePaiementActionPerformed
    {//GEN-HEADEREND:event_miModePaiementActionPerformed
        controller.getModePaiementAllFrame().setVisible(true);
    }//GEN-LAST:event_miModePaiementActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Types de
     * place'.
     *
     * @param evt
     */
    private void miTypePlaceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miTypePlaceActionPerformed
    {//GEN-HEADEREND:event_miTypePlaceActionPerformed
        controller.getTypePlaceAllFrame().setVisible(true);
    }//GEN-LAST:event_miTypePlaceActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Zones'.
     *
     * @param evt
     */
    private void miZonesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miZonesActionPerformed
    {//GEN-HEADEREND:event_miZonesActionPerformed
        controller.getZoneAllFrame().setVisible(true);
    }//GEN-LAST:event_miZonesActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Plans'.
     *
     * @param evt
     */
    private void miPlanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miPlanActionPerformed
    {//GEN-HEADEREND:event_miPlanActionPerformed
        controller.getPlanAllFrame().setVisible(true);
    }//GEN-LAST:event_miPlanActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Fichier - Creer à
     * partir de'.
     *
     * @param evt
     */
    private void miCreateFromActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCreateFromActionPerformed
    {//GEN-HEADEREND:event_miCreateFromActionPerformed
        File oldDb;
        File newDb;

        explorer.setApproveButtonToolTipText("Base de données SOURCE");
        explorer.showDialog(this, "Ouvrir");
        if (explorer.getSelectedFile() != null) {
            oldDb = explorer.getSelectedFile();
            explorer.setApproveButtonToolTipText("Base de données CIBLE");
            explorer.showDialog(this, "Creer");
            if (explorer.getSelectedFile() != null && explorer.getSelectedFile() != oldDb) {
                newDb = explorer.getSelectedFile();
                controller.importDb(oldDb, newDb);
            }
        }
    }//GEN-LAST:event_miCreateFromActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Billeterie - Vente'.
     *
     * @param evt
     */
    private void miAchatActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAchatActionPerformed
    {//GEN-HEADEREND:event_miAchatActionPerformed
        controller.getAchatsEditFrame(V_Main.MODE_AJOUT).setVisible(true);
    }//GEN-LAST:event_miAchatActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Billeterie - Toutes
     * les ventes'.
     *
     * @param evt
     */
    private void miAchatAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAchatAllActionPerformed
    {//GEN-HEADEREND:event_miAchatAllActionPerformed
        controller.getAchatsAllFrame().setVisible(true);
    }//GEN-LAST:event_miAchatAllActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Paramètres - Places'.
     *
     * @param evt
     */
    private void miPlacesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miPlacesActionPerformed
    {//GEN-HEADEREND:event_miPlacesActionPerformed
        controller.getPlaceAllFrame().setVisible(true);
    }//GEN-LAST:event_miPlacesActionPerformed

    /**
     * Méthode utilisée lorque l'on appuie sur le bouton 'Billeterie -
     * Rechercher'.
     *
     * @param evt
     */
    private void miRechercherActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRechercherActionPerformed
    {//GEN-HEADEREND:event_miRechercherActionPerformed
        controller.getRechercheFrame().setVisible(true);
    }//GEN-LAST:event_miRechercherActionPerformed

    /**
     * Méthode utilisée lorsque l'on appuie sur le bouton 'A propos -
     * Information'.
     *
     * @param evt
     */
    private void miInfoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miInfoActionPerformed
    {//GEN-HEADEREND:event_miInfoActionPerformed
        controller.getAboutFrame().setVisible(true);
    }//GEN-LAST:event_miInfoActionPerformed

    private void miVoirPlansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVoirPlansActionPerformed
        controller.getPlansFrame().setVisible(true);
    }//GEN-LAST:event_miVoirPlansActionPerformed

    /**
     * Méthode permettant d'importer, dans la base de données actuelle, un
     * script SQL.
     *
     * @param evt
     */
    private void miImportSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportSqlActionPerformed
        explorer.setFileFilter(new FileNameExtensionFilter("Fichiers SQL (.sql)", "sql"));
        explorer.setAcceptAllFileFilterUsed(false);
        explorer.showOpenDialog(this);
        if (explorer.getSelectedFile() != null) {
            controller.importSql(explorer.getSelectedFile());
        }
    }//GEN-LAST:event_miImportSqlActionPerformed

    /**
     * Met à jour les stats sur la vue principale.
     *
     * @param nbVentes
     * @param placesVendues
     * @param placesRestantes
     */
    public void refreshData(int nbVentes, int placesVendues, int placesRestantes) {
        lbVentesResult.setText(String.valueOf(nbVentes));
        lbPlacesVResult.setText(String.valueOf(placesVendues));
        lbPlacesRResult.setText(String.valueOf(placesRestantes));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JLabel lbPlacesRResult;
    private javax.swing.JLabel lbPlacesRestantes;
    private javax.swing.JLabel lbPlacesVResult;
    private javax.swing.JLabel lbPlacesVendues;
    private javax.swing.JLabel lbStats;
    private javax.swing.JLabel lbVentesEffectuees;
    private javax.swing.JLabel lbVentesResult;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenuItem miAchat;
    private javax.swing.JMenuItem miAchatAll;
    private javax.swing.JMenuItem miCategoriePrix;
    private javax.swing.JMenuItem miClassePrix;
    private javax.swing.JMenuItem miClients;
    private javax.swing.JMenuItem miCreateFrom;
    private javax.swing.JMenuItem miCreateNewBase;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miImportSql;
    private javax.swing.JMenuItem miInfo;
    private javax.swing.JMenuItem miModePaiement;
    private javax.swing.JMenuItem miOpenBase;
    private javax.swing.JMenuItem miOrigine;
    private javax.swing.JMenuItem miPlaces;
    private javax.swing.JMenuItem miPlan;
    private javax.swing.JMenuItem miPrix;
    private javax.swing.JMenuItem miRechercher;
    private javax.swing.JMenuItem miTypePlace;
    private javax.swing.JMenuItem miVoirPlans;
    private javax.swing.JMenuItem miZones;
    private javax.swing.JMenu mnAbout;
    private javax.swing.JMenu mnBilleterie;
    private javax.swing.JMenu mnEdition;
    private javax.swing.JMenu mnFichier;
    private javax.swing.JMenu mnParams;
    // End of variables declaration//GEN-END:variables
}
